#include "main.h"

#define Servo_Right_Leg TIM3->CCR1 //PB4
#define Servo_Left_Leg TIM3->CCR2 // PB5
#define Servo_Right_Hip TIM3->CCR3 //PB0
#define Servo_Left_Hip TIM3->CCR4 //PB1
#define Servo_Head TIM1->CCR1 //PA8

#define	RLC	1500	//TIM3->CCR1 = 1520;
#define	LLC	1500	//TIM3->CCR2 = 1470;
#define	RHC	1500	//TIM3->CCR3 = 1440;
#define	LHC	1500 	//TIM3->CCR4 = 1470;

// Define Event Group flags
#define	Head_Reset			( (EventBits_t)( 0x01 <<0) )
#define	Head_Turn_Stop		( (EventBits_t)( 0x01 <<1) )
#define Head_Turn_Right		( (EventBits_t)( 0x01 <<2) )
#define Head_Turn_Left		( (EventBits_t)( 0x01 <<3) )
#define Head_Pos_Max_Right	( (EventBits_t)( 0x01 <<4) )
#define Head_Pos_Max_Left	( (EventBits_t)( 0x01 <<5) )

#define Walk_Stop			( (EventBits_t)( 0x01 <<0) )
#define	Walk_Forward		( (EventBits_t)( 0x01 <<1) )
#define	Walk_Backward		( (EventBits_t)( 0x01 <<2) )
#define	Walk_Turn_Stop		( (EventBits_t)( 0x01 <<3) )
#define Walk_Turn_Right		( (EventBits_t)( 0x01 <<4) )
#define Walk_Turn_Left		( (EventBits_t)( 0x01 <<5) )
#define Walk_Imu_Go 		( (EventBits_t)( 0x01 <<6) )
#define Walk_Imu_Stop		( (EventBits_t)( 0x01 <<7) )

// Kernel objects
EventGroupHandle_t EventGroupHead;
EventGroupHandle_t EventGroupWalk;

xSemaphoreHandle xSem_New_Data_Uart;
xSemaphoreHandle xSem_New_Data_Sonar;
xSemaphoreHandle xSem_Tag_Found;
xSemaphoreHandle xSem_Tag_Lost;
xSemaphoreHandle xSem_Obstacle_Disapear;
xSemaphoreHandle xSem_Obstacle_Present;
xSemaphoreHandle xSem_Cons_Ok;
xSemaphoreHandle xSem_Head_Track_Start;
xSemaphoreHandle xSem_Head_Track_Stop;

// Functions
static uint8_t SystemClock_Config(void);

//FreeRTOS Tasks
void GET_IMU				(void *pvParameters);
void TASK_CMD_TEST 			(void *pvParameters);
void MOVE_CONTROL 			(void *pvParameters);
void HEAD_CONTROL 			(void *pvParameters);
void DECODE_UART_DATA 		(void *pvParameters);
void GET_SONAR 				(void *pvParameters);
void MOVE_CONTROL_IMU 		(void *pvParameters);
void HEAD_CONTROL_TRACKING 	(void *pvParameters);

//GLOBAL VARIABLE
uint8_t rx_dma_buffer[16];
int sonar_data;
double roll,pitch,yaw;
uint8_t mpu_data[6];
int id_tag, x_tag, y_tag = 0;

float cons;

int main()
{
	//Initialize Clock (64MHz)
	SystemClock_Config();

	//Initialize Console
	BSP_Console_Init();
	delay_ms(100);

	//Initialize LED for debug
	BSP_LED_Init();
	delay_ms(100);

	//Initialize I2C
	BSP_I2C1_Init();
	delay_ms(100);

	//Initialize i2c + IMU BNO055
	BSP_I2C1_Init();
	delay_ms(100);
	BNO055_Init();
	delay_ms(100);

	//Initialize Servo
	BSP_SERVO_INIT();
	delay_ms(100);

	// Create Event Group                   // <-- Create Event Group here
	EventGroupHead = xEventGroupCreate();
	EventGroupWalk = xEventGroupCreate();

	// Create Semaphore object
	xSem_New_Data_Uart 		= xSemaphoreCreateBinary();
	xSem_New_Data_Sonar 	= xSemaphoreCreateBinary();

	xSem_Tag_Found 			= xSemaphoreCreateBinary();
	xSem_Tag_Lost 			= xSemaphoreCreateBinary();

	xSem_Obstacle_Disapear	= xSemaphoreCreateBinary();
	xSem_Obstacle_Present	= xSemaphoreCreateBinary();

	xSem_Cons_Ok			= xSemaphoreCreateBinary();

	xSem_Head_Track_Start	= xSemaphoreCreateBinary();
	xSem_Head_Track_Stop	= xSemaphoreCreateBinary();

	// Create Tasks

	//xTaskCreate(GET_SONAR, "GET_SONAR", 256, NULL, 2, NULL);
	xTaskCreate(TASK_CMD_TEST, "TASK_CMD_TEST", 256, NULL, 5, NULL);
	//xTaskCreate(MOVE_CONTROL, "MOVE_CONTROL", 256, NULL, 2, NULL);
	xTaskCreate(MOVE_CONTROL_IMU, "MOVE_CONTROL_IMU", 256, NULL, 3, NULL);
	xTaskCreate(HEAD_CONTROL_TRACKING, "HEAD_CONTROL_TRACKING", 256, NULL, 4, NULL);
	//xTaskCreate(HEAD_CONTROL, "HEAD_CONTROL", 256, NULL, 2, NULL);
	xTaskCreate(DECODE_UART_DATA, "DECODE_UART_DATA", 256, NULL, 1, NULL);
	xTaskCreate(GET_IMU, "GET_IMU", 256, NULL, 1, NULL);

	//Start Scheduler
	my_printf("\r\n Pepi Ready! \r\n");
	vTaskStartScheduler();

	//uint8_t rx_data[1];

	//uint8_t err;
	while(1);
}
/*
 *
 */
void GET_IMU(void *pvParameters){
	int16_t x,y,z;

	while(1){

		//Get YAW
		BSP_I2C1_Read(BNO055_ADDRESS_A, BNO055_EULER_H_LSB_ADDR, &mpu_data,2);
		x = (((int16_t)mpu_data[1])<<8) | ((int16_t)mpu_data[0]);
		yaw = ((float)x) / 16.0;

		vTaskDelay(10);
	}
}

/*
 * Task Command Test
 */
void TASK_CMD_TEST(void *pvParameters){

	while(1)
	{
		//On attend la detection d'un tag
		xSemaphoreTake(xSem_Tag_Found,portMAX_DELAY);
		//On track le Tag avec la tête et on demare la marche
		xSemaphoreGive(xSem_Head_Track_Start);
		xEventGroupSetBits(EventGroupWalk, Walk_Imu_Go);

		//On attend la perte du Tag
		xSemaphoreTake(xSem_Tag_Lost,portMAX_DELAY);
		//On ne track plus le Tag avec la tête et on stop la marche
		xEventGroupSetBits(EventGroupWalk, Walk_Imu_Stop);
		xSemaphoreGive(xSem_Head_Track_Stop);


	}

	while(0){
		xEventGroupSetBits(EventGroupWalk, Walk_Imu_Go);
		vTaskDelay(portMAX_DELAY);
		xEventGroupSetBits(EventGroupWalk, Walk_Imu_Stop);
		vTaskDelay(5000);

	}

	while(0){

		xSemaphoreTake(xSem_Tag_Found,portMAX_DELAY);
		xEventGroupSetBits(EventGroupWalk, Walk_Imu_Go);
		xSemaphoreTake(xSem_Tag_Lost,portMAX_DELAY);
		xEventGroupSetBits(EventGroupWalk, Walk_Imu_Stop);

	}

	while(0)
	{
		/*
		 * Recherche et evitement d'obstacle
		 */
		xEventGroupSetBits(EventGroupWalk, Walk_Forward);
		xSemaphoreTake(xSem_Obstacle_Present,portMAX_DELAY);

		xEventGroupSetBits(EventGroupWalk, Walk_Stop);
		xEventGroupSetBits(EventGroupHead, Head_Turn_Left);
		xEventGroupWaitBits(EventGroupHead, Head_Pos_Max_Left, pdFALSE, pdFALSE, portMAX_DELAY);

		if(xSemaphoreTake(xSem_Obstacle_Disapear,1000) !=pdTRUE)
		{
			xEventGroupSetBits(EventGroupHead, Head_Turn_Right);
			xEventGroupWaitBits(EventGroupHead, Head_Pos_Max_Right, pdFALSE, pdFALSE, portMAX_DELAY);

			if(xSemaphoreTake(xSem_Obstacle_Disapear,1000) !=pdTRUE)
			{
				xEventGroupSetBits(EventGroupHead, Head_Reset);
				xEventGroupSetBits(EventGroupWalk, Walk_Turn_Right);
				vTaskDelay(3000);
				xSemaphoreTake(xSem_Obstacle_Disapear,portMAX_DELAY);
			}
			else
			{
				xEventGroupSetBits(EventGroupHead, Head_Reset);
				vTaskDelay(1000);
				xEventGroupSetBits(EventGroupWalk, Walk_Turn_Right);
				vTaskDelay(3000);
				xSemaphoreTake(xSem_Obstacle_Disapear,portMAX_DELAY);
			}
		}
		else
		{
			xEventGroupSetBits(EventGroupHead, Head_Reset);
			vTaskDelay(1000);
			xEventGroupSetBits(EventGroupWalk, Walk_Turn_Left);
			vTaskDelay(3000);
			xSemaphoreTake(xSem_Obstacle_Disapear,portMAX_DELAY);
		}

		xEventGroupSetBits(EventGroupHead, Head_Reset);
		vTaskDelay(1000);
	}

}
/*
 * Get Sonar
 */
void GET_SONAR(void *pvParameters){

	//Initialize Sonar
	BSP_SONAR();

	//Set NVIC priority
	NVIC_SetPriority(TIM2_IRQn , configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 2);
	NVIC_EnableIRQ(TIM2_IRQn);

	while(1){
		xSemaphoreTake(xSem_New_Data_Sonar, portMAX_DELAY);

		//BSP_LED_Toggle();
		my_printf("\r\n sonar = %d,\r\n", sonar_data);
		if(sonar_data<1500){
			xSemaphoreTake(xSem_Obstacle_Disapear,0);
			xSemaphoreGive(xSem_Obstacle_Present);
		}else{
			xSemaphoreTake(xSem_Obstacle_Present,0);
			xSemaphoreGive(xSem_Obstacle_Disapear);
		}
	}
}
/*
 * Decode Uart Data from OPENMV CAM
 */
void DECODE_UART_DATA(void *pvParameters){

	portBASE_TYPE	xStatus;

	//Initialize UART
	uart_init();

	//Set NVIC priority

	NVIC_SetPriority(USART1_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1);
	NVIC_EnableIRQ(USART1_IRQn);

	while(1){
		xStatus = xSemaphoreTake(xSem_New_Data_Uart, 500);

		if (xStatus == pdPASS)
		{
			USART1->CR1 &= ~USART_CR1_UE;

			if(rx_dma_buffer[0]=='$'){
				switch (rx_dma_buffer[1]) {
					case 'T':
						//decodage de la tram
						sscanf(&rx_dma_buffer[2],"%d,%d,%d",&id_tag,&x_tag,&y_tag);

						//reset du semaphore xSem_Tag_Lost
						xSemaphoreTake(xSem_Tag_Lost, 0);

						//set du semaphore xSem_Tag_Found
						xSemaphoreGive(xSem_Tag_Found);

						//Debug
						//my_printf("\r\n TAG ID = %d, x = %d, y = %d.\r\n", id_tag, x_tag, y_tag);
						break;

					default:
						//Debug
						//my_printf("\r\n Error format\r\n");
						break;
				}
			}

			// Make sure DMA1 channel 5 is disabled
			while ( (DMA1_Channel5->CCR & DMA_CCR_EN) != 0)
			{
				DMA1_Channel5->CCR &= ~DMA_CCR_EN;
			}

			// Number of data items to transfer
			DMA1_Channel5->CNDTR = 16;

			// Enable DMA1 channel 5
			DMA1_Channel5->CCR |= DMA_CCR_EN;

			// Enable USART1
			USART1->CR1 |= USART_CR1_UE;
		}
		else{
			//Reset du semaphore xSem_Tag_found
			xSemaphoreTake(xSem_Tag_Found, 0);

			//Set du semaphore xSem_Tag_Lost
			xSemaphoreGive(xSem_Tag_Lost);

			//Reset id Tag
			x_tag = 0;
		}


	}
}
/*
 *Head control
 */
void HEAD_CONTROL(void *pvParameters){

	EventBits_t uxBits;
	Servo_Head = 1500;

	while(1)
	{
		uxBits = xEventGroupWaitBits(EventGroupHead, Head_Reset | Head_Turn_Left | Head_Turn_Right | Head_Turn_Stop, pdTRUE, pdFALSE, portMAX_DELAY);

		if((uxBits & Head_Turn_Stop) == Head_Turn_Stop)
		{
			//my_printf("St");
		}
		if((uxBits & Head_Reset) == Head_Reset)
		{
			xEventGroupClearBits(EventGroupHead, Head_Pos_Max_Left);
			xEventGroupClearBits(EventGroupHead, Head_Pos_Max_Right);

			while( xEventGroupWaitBits(EventGroupHead,Head_Reset | Head_Turn_Left | Head_Turn_Right | Head_Turn_Stop,	pdFALSE, pdTRUE, 10)
					== 0)
			{
				//my_printf("Re");
				Servo_Head = 1500;
				xEventGroupSetBits(EventGroupHead, Head_Turn_Stop);
			}
			//my_printf(".");
		}
		else if((uxBits & Head_Turn_Right) == Head_Turn_Right)
		{
			xEventGroupClearBits(EventGroupHead, Head_Pos_Max_Left);

			while( xEventGroupWaitBits(EventGroupHead,Head_Reset | Head_Turn_Left | Head_Turn_Right | Head_Turn_Stop,	pdFALSE, pdTRUE, 10)
					== 0)
			{
				//my_printf("Ri");
				Servo_Head -= 10;
				if(Servo_Head < 1010) {
					xEventGroupSetBits(EventGroupHead, Head_Turn_Stop);
					xEventGroupSetBits(EventGroupHead, Head_Pos_Max_Right);
				}
			}
			//my_printf(".");
		}
		else if((uxBits & Head_Turn_Left) == Head_Turn_Left)
		{
			xEventGroupClearBits(EventGroupHead, Head_Pos_Max_Right);
			while( xEventGroupWaitBits(EventGroupHead,Head_Reset | Head_Turn_Left | Head_Turn_Right | Head_Turn_Stop,	pdFALSE, pdTRUE, 10)
					== 0)
			{
				//my_printf("Le");
				Servo_Head += 10;
				if(Servo_Head > 1990) {
					xEventGroupSetBits(EventGroupHead, Head_Turn_Stop);
					xEventGroupSetBits(EventGroupHead, Head_Pos_Max_Left);
				}
			}
			//my_printf(".");
		}

	}

}
float signal_sin,signal_cos,signal_cos_arms,signal_sin_R,signal_sin_L,signal_cmd;
uint32_t servog, servod;
float error_c,integral;
/*
 * Move control
 */
void MOVE_CONTROL(void *pvParameters){

	float F = 250; //Bascule
	float R = 90; //Torsion
	float L = 100;
	float B = 250; //Rot des bras

	int DF = 30;

	float t = 25; // init a 25 car cos(25*....) = 0 evite le sursaut au demarage

	EventBits_t uxBits;

	float Kp = 3;
	float Ki = 10;
	float phi = 0;

	float abs_error;


	while(1)
	{

		uxBits = xEventGroupWaitBits(EventGroupWalk, Walk_Forward | Walk_Backward |Walk_Turn_Left | Walk_Turn_Right | Walk_Turn_Stop, pdTRUE, pdFALSE, portMAX_DELAY);

		signal_cmd = yaw*8.3;
		while( xEventGroupWaitBits(EventGroupWalk,
				Walk_Stop | Walk_Forward | Walk_Backward | Walk_Turn_Left | Walk_Turn_Right | Walk_Turn_Stop,
				pdFALSE, pdFALSE, 15) == 0)
		{
			signal_cos = (F*cos((t/100)*2.0*3.14));
			signal_sin = (R*sin((t/100)*2.0*3.14));

			signal_cos_arms = (B*cos((t/100)*2.0*3.14));

			if((uxBits & Walk_Turn_Left) == Walk_Turn_Left)
			{
				Servo_Right_Hip = RHC - signal_sin;
				Servo_Left_Hip = LHC + signal_sin;
			}
			else if((uxBits & Walk_Turn_Right) == Walk_Turn_Right)
			{
				Servo_Right_Hip = RHC + signal_sin;
				Servo_Left_Hip = LHC - signal_sin;
			}else
			{
				Servo_Right_Hip = RHC - signal_sin;
				Servo_Left_Hip = LHC - signal_sin;
			}

			if((uxBits & Walk_Backward) == Walk_Backward)
			{
				Servo_Left_Leg = LLC - signal_cos + DF;
				Servo_Right_Leg = RLC - signal_cos - DF;
			}
			else
			{
				Servo_Left_Leg = LLC + signal_cos + DF ;
				Servo_Right_Leg = RLC + signal_cos - DF;
			}

			//TIM1->CCR1 = (1000 + B) + signal_cos_arms; // right arm
			//TIM1->CCR2 = (2000 - B) + signal_cos_arms; // left arm

			t++;
			if(t>=100){t=0;}
		}
		if((xEventGroupWaitBits(EventGroupWalk, Walk_Stop, pdTRUE, pdFALSE, 0) & Walk_Stop) == Walk_Stop)
		{
			//Eventgroup sur Walk_Stop -> on descend pepere
			//my_printf("|");
			Servo_Left_Hip  = LHC;
			Servo_Right_Hip = RHC;

			while((t != 25)&&(t != 75))
			{
				signal_cos = (F*cos((t/100)*2.0*3.14));
				Servo_Left_Leg = LLC + signal_cos + 50;
				Servo_Right_Leg = RLC + signal_cos - 50;

				t++;
				if(t>=100){t=0;}
				vTaskDelay(10);
			}

			//On coupe les servo's
			Servo_Left_Hip 	= 0;
			Servo_Right_Hip = 0;
			Servo_Left_Leg 	= 0;
			Servo_Right_Leg = 0;
		}

		//my_printf(".");
	}
}

float pos_servo;
uint32_t cmd;

void HEAD_CONTROL_TRACKING(void *pvParameters){

	float error_track, integral;
	float kp = 0.8;
	float ki = 0.1;
	 // en deg

	uint8_t dt = 10; // en millisecond

	while(1){

		//xSemaphoreTake(xSem_Tag_Found, portMAX_DELAY);

		xSemaphoreTake(xSem_Head_Track_Start, portMAX_DELAY);


		//while(xSemaphoreTake(xSem_Tag_Lost, 10) != pdPASS ){
		while(xSemaphoreTake(xSem_Head_Track_Stop, 10) != pdPASS ){

			error_track = 0 - (x_tag/10); // en deg (/10 pour récupérer la valeur decimal
			integral = integral + error_track;

			pos_servo = -1*(kp*error_track+ki*integral);

			//if(pos_servo > 60) pos_servo = 60;
			//if(pos_servo < -60) pos_servo = -60;

			cmd = 1500 - pos_servo*500/60;

			if(cmd>2000) cmd = 2000;
			if(cmd<1000) cmd = 1000;

			Servo_Head = cmd;
			cons = yaw + pos_servo + x_tag/10;

			vTaskDelay(dt);
		}
		//reset de la position de tête quand on perd le tag
		Servo_Head = 1500;

		//reset des variables
		cmd = 1500;
		error_track = 0;
		integral = 0;

	}

}

void MOVE_CONTROL_IMU(void *pvParameters){

	float F = 230; //Bascule
	float R = 50; //Torsion
	float L = 100;
	float B = 250; //Rot des bras

	int DF = 30;

	float t = 25; // init a 25 car cos(25*....) = 0 evite le sursaut au demarage

	EventBits_t uxBits;

	float Kp = 2.5;

	float abs_error;

	cons = 0;


	while(1)
	{
		uxBits = xEventGroupWaitBits(EventGroupWalk, Walk_Imu_Go, pdTRUE, pdFALSE, portMAX_DELAY)&0b01000000;

		while( (xEventGroupWaitBits(EventGroupWalk, Walk_Imu_Stop, pdTRUE, pdFALSE, 15)&0b10000000) == 0)
		{
			signal_cos = (F*cos((t/100)*2.0*3.14));
			signal_cos_arms = (B*cos((t/100)*2.0*3.14));

			if(yaw > 180) yaw = -1 * (360-yaw);

			//--
			if(cons > 360) cons=cons-360;
			if(cons < 0) cons=cons+360;
			abs_error = cons - yaw;

			if(abs_error > 180){
				error_c = abs_error-360;
			}else if(abs_error < -180){
				error_c = abs_error+360;
			}else{
				error_c = abs_error;
			}
			//--

			if((error_c < 2.5) && (error_c > -2.5)){
				xSemaphoreGive(xSem_Cons_Ok);
			}

			signal_sin_R = ((100+Kp*error_c)*sin((t/100)*2.0*3.14));
			signal_sin_L = ((100-Kp*error_c)*sin((t/100)*2.0*3.14));


			if(signal_sin_R >  100) signal_sin_R =  100;
			if(signal_sin_R < -100) signal_sin_R = -100;

			if(signal_sin_L >  100) signal_sin_L =  100;
			if(signal_sin_L < -150) signal_sin_L = -100;


			Servo_Right_Hip = (uint32_t)(1500 - signal_sin_R);
			Servo_Left_Hip 	= (uint32_t)(1500 - signal_sin_L);
			Servo_Left_Leg = LLC + signal_cos + DF;
			Servo_Right_Leg = RLC + signal_cos - DF;

			t++;
			if(t>=100) t=0;

		}
		Servo_Left_Hip  = LHC;
		Servo_Right_Hip = RHC;

		while((t != 25)&&(t != 75))
		{
			signal_cos = (F*cos((t/100)*2.0*3.14));
			Servo_Left_Leg = LLC + signal_cos + 50;
			Servo_Right_Leg = RLC + signal_cos - 50;

			t++;
			if(t>=100){t=0;}
			vTaskDelay(15);
		}

		vTaskDelay(500);
		//On coupe les servo's
		Servo_Left_Hip 	= 0;
		Servo_Right_Hip = 0;
		Servo_Left_Leg 	= 0;
		Servo_Right_Leg = 0;
	}
}

/*
 * 	Clock configuration for the Nucleo STM32F303K8 board
 *
 * 	Default solder bridges configuration is for HSI (HSE is not connected)
 * 	You can change this by swapping solder bridges SB4 and SB6 (see Nucleo User manual)
 *
 * 	HSI clock configuration provides :
 * 	- SYSCLK, AHB	-> 64MHz
 * 	- APB2			-> 64MHz
 * 	- APB1			-> 32MHz (periph) 64MHz (timers)
 *
 * 	HSE clock configuration from ST-Link 8MHz MCO provides :
 * 	- SYSCLK, AHB	-> 72MHz
 * 	- APB2			-> 72MHz
 * 	- APB1			-> 36MHz (periph) 72MHz (timers)
 *
 * 	Select configuration by setting one of these symbol in your build configuration
 * 	- USE_HSI
 * 	- USE_HSE
 *
 */

#ifdef USE_HSI

static uint8_t SystemClock_Config()
{
	uint32_t	status;
	uint32_t	timeout = 0;

	// Start 8MHz HSI (it should be already started at power on)
	RCC->CR |= RCC_CR_HSION;

	// Wait until HSI is stable
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_HSIRDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (1);	// HSI error


	// Configure Flash latency according to the speed (2WS)
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
	FLASH->ACR |= 0x02 <<0;

	// Set HSI as PLL input
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSI_DIV2;	// 4MHz from HSI

	// Configure the main PLL
	#define PLL_MUL		16					// 4MHz HSI to 64MHz
	RCC->CFGR |= (PLL_MUL-2) <<18;

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;

	// Configure AHB/APB prescalers
	// AHB  Prescaler = /1	-> 64 MHz
	// APB1 Prescaler = /2  -> 32/64 MHz
	// APB2 Prescaler = /1  -> 64 MHz
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;

	// Wait until PLL is ready
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (2);	// PLL error


	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;

	// Wait until PLL is switched on
	timeout = 1000;

	do
	{
		status = RCC->CFGR & RCC_CFGR_SWS;
		timeout--;
	} while ((status != RCC_CFGR_SWS_PLL) && (timeout > 0));

	if (timeout == 0) return (3);	// SW error

	// Update System core clock
	SystemCoreClockUpdate();
	return (0);
}

#endif


#ifdef USE_HSE

static uint8_t SystemClock_Config()
{
	uint32_t	status;
	uint32_t	timeout;

	// Start HSE
	RCC->CR |= RCC_CR_HSEBYP;
	RCC->CR |= RCC_CR_HSEON;

	// Wait until HSE is ready
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_HSERDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (1); 	// HSE error


	// Configure Flash latency according to the speed (2WS)
	FLASH->ACR &= ~FLASH_ACR_LATENCY;
	FLASH->ACR |= 0x02 <<0;

	// Configure the main PLL
	#define PLL_MUL		9	// 8MHz HSE to 72MHz
	RCC->CFGR |= (PLL_MUL-2) <<18;

	// Set HSE as PLL input
	RCC->CFGR |= RCC_CFGR_PLLSRC_HSE_PREDIV;

	// Enable the main PLL
	RCC-> CR |= RCC_CR_PLLON;

	// Configure AHB/APB prescalers
	// AHB  Prescaler = /1	-> 72 MHz
	// APB1 Prescaler = /2  -> 36/72 MHz
	// APB2 Prescaler = /1  -> 72 MHz
	RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;

	// Wait until PLL is ready
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
		timeout--;
	} while ((status == 0) && (timeout > 0));

	if (timeout == 0) return (2); 	// PLL error


	// Select the main PLL as system clock source
	RCC->CFGR &= ~RCC_CFGR_SW;
	RCC->CFGR |= RCC_CFGR_SW_PLL;

	// Wait until PLL is switched on
	timeout = 1000;

	do
	{
		status = RCC->CR & RCC_CR_PLLRDY;
		timeout--;
	} while ((status != RCC_CFGR_SWS_PLL) && (timeout > 0));

	if (timeout == 0) return (3); 	// SW error


	// Update System core clock
	SystemCoreClockUpdate();
	return (0);
}

#endif
